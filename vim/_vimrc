set nocompatible

let g:pathogen_disabled = ["delimitMate"]

" Local config.
if filereadable($HOME."/.vimrc.first.local")
    source $HOME/.vimrc.first.local
endif

" Install pathogen
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()

syntax on

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart

" Enable filetype plugins and indention
filetype plugin indent on

" File Encodings
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=iso-2002-jp,utf-8,euc-jp,cp932
set fileformat=unix

" Set the fold level so that folds are open by default.
" See: http://vim.wikia.com/wiki/All_folds_open_when_opening_a_file
set foldlevelstart=20

" Set swap file directory
" Add two slashes at the end so the swap file name is
" built from the full file path.
set directory=~/.vim/swap//
" Set backup file directory
" Add two slashes at the end so the swap file name is
" built from the full file path.
set backupdir=~/.vim/backup//

"Turn off annoying system bell
set visualbell t_vb=

" sets leader to ',' and localleader to "\"
let mapleader=","
let maplocalleader="\\"

"Turn off automatic comment continuation
autocmd FileType * setlocal fo-=r fo-=q fo-=o

set modeline
set modelines=5

" Variables
set tabstop=4
set shiftwidth=4
" soft tabs
set expandtab
"backspace mode
set bs=2
set backspace=2
"Auto indent
set cindent
"set cinkeys=0{,0},:,0#,!,!^F

" go with smartindent if there is no plugin indent file.
" but don't outdent hashes
set smartindent
inoremap # X#
set autoindent

" Turn off automatic switching to Japanese input
set iminsert=0
set imsearch=0

" Search Options
" Japanese input during search. Doesn't work well?
" set imactivatekey=S-space
" set iminsert=1
" set imsearch=1
set ignorecase


" incremental search
set incsearch

"Run gofmt on save
let g:go_fmt_autosave = 1
" let g:go_fmt_fail_silently = 1
" Set the comment string for Go to line comments.
autocmd FileType go setlocal commentstring=//%s
" Set the comment string for C++ to line comments.
autocmd FileType cpp setlocal commentstring=//%s

"limit netrw file list
let g:netrw_list_hide='^.*\~$,^.*\.pyc$,\.exe$,\.zip$,\.gz,\.swp,\.orig$'

" Expand code blocks
let delimitMate_expand_cr = 1

" Status line
set laststatus=2
if has("statusline")
  set statusline=%<%f\ %h%m%r%=%y(%{&ff})\ %{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P

  " Errors for syntax checking
  set statusline+=%#warningmsg#
  if exists(':SyntasticStatuslineFlag')
      set statusline+=%{SyntasticStatuslineFlag()}
  endif
  set statusline+=%*
endif

" Don't use selectmode
set selectmode=

colors desert

"Hide menu and toolbar
set guioptions-=T
set guioptions-=m
" Turn off cursor blinking
set gcr=a:blinkon0
" Allow more characters in console mode.
set ttyfast

" Auto set current path to the working directory
autocmd BufEnter * silent! lcd %:p:h

" Omnicomplete
set ofu=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" CPP files for Arduino
autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp

" Make .md files markdown
au BufRead,BufNewFile *.md set filetype=markdown

" Terraform variables
" See: https://www.terraform.io/intro/getting-started/variables.html
autocmd BufNewFile,BufReadPost *.tfvars set filetype=terraform

let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Use_Right_Window=1
let Tlist_Exit_OnlyWindow=1
let Tlist_File_Fold_Auto_Close=1
let Tlist_Show_One_File=1

" SQL filetype is buggy so set it to text
au! filetypedetect BufNewFile,BufRead *.sql
au filetypedetect BufNewFile,BufRead *.sql          setf text

" Keymappings
" Dvorak
noremap n j
noremap t k
noremap s l
noremap j n
noremap gn gk
noremap gt gj

noremap l n

" tab for brackets
nnoremap <tab> %
vnoremap <tab> %

" toggle between number, relative number and nonumber on ,l
nnoremap <leader>l :call ToggleRelativeAbsoluteNumber()<CR>
function! ToggleRelativeAbsoluteNumber()
    if &relativenumber
        set nonumber 
        set norelativenumber 
    else
        if &number
            set relativenumber
        else
            set number 
        endif
    endif
endfunction

" disable arrow keys
" ** But I want to use them with netrw because you can't change it's
" keybindings so we'll leave them set.
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

nmap <C-s> :w<CR>
imap <C-s> <ESC>:w<CR>i<right>

" Terminal friendly visual block shortcut for the terminal
noremap vb <C-v>

" Windows style Cut,Copy,Paste for
" interaction with other programs.

" nmap <C-x> "+x
vmap <C-x> "+x

" nmap <C-c> "+y
vmap <C-c> "+y

nmap <C-v> "+gP
vmap <C-v> <DEL>"+gP
imap <C-v> <ESC>"+gpi

" Toggle the quick buffer by hitting semicolon twice.
let g:qb_hotkey = ";;"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

" For java syntax checking
"let g:syntastic_java_checker = 'javac'

" Make eclim use omnifunc so that it plays well with YCM
let g:EclimCompletionMethod = 'omnifunc'

" Bda -  Delete all buffers.

command! -nargs=0 -bang Bda
    \ :call BufDeleteAll('<bang>')

function! BufDeleteAll(bang)
    let last_buffer = bufnr('$')

    let n = 1
    while n <= last_buffer
        if a:bang == '' && getbufvar(n, '&modified')
            echohl ErrorMsg
            echomsg 'No write since last change for buffer'
                        \ n '(add ! to override)'
            echohl None
            return 0
        endif
        let n = n+1
    endwhile

    let delete_count = 0
    let n = 1
    while n <= last_buffer
        if buflisted(n)
            silent exe 'bdel' . a:bang . ' ' . n
            if ! buflisted(n)
                let delete_count = delete_count+1
            endif
        endif
        let n = n+1
    endwhile

    if delete_count == 1
        echomsg delete_count "buffer deleted"
    elseif delete_count > 1
        echomsg delete_count "buffers deleted"
    endif

endfunction

" Windows local config.
if $OS == 'Windows_NT' && filereadable(".vimrc.windows")
    source .vimrc.windows
endif
" Local config.
if filereadable($HOME.".vimrc.local")
    source $HOME/.vimrc.local
endif
