#!/bin/bash
# vim: set ft=sh:
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# tmux/screen
# Start a tmux or screen session if not already in one
# Exit directly after the tmux/screen session is exited
if [[ "$TERM" != screen* ]]; then
    if which tmux > /dev/null 2>&1; then
        # Attempt to discover a detached session
        # Use the current username as the session name.
		if tmux has-session -t "${USER}" 2>/dev/null; then
			tmux attach-session -t "${USER}" && exit
		else
			tmux new-session -s "${USER}" && exit
		fi
    elif which screen > /dev/null 2>&1; then
        # Attempt to discover a detached session
        screen -q -RR && exit
    fi
fi

if [ -f /etc/bashrc ]; then
    # shellcheck source=/dev/null
    . /etc/bashrc 
fi
# For some debian systems
if [ -f /etc/bash.bashrc ]; then
    # shellcheck source=/dev/null
    . /etc/bash.bashrc 
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [ -f ~/.bashrc_init_local ]; then
    # shellcheck source=/dev/null
    . ~/.bashrc_init_local
fi

export VISUAL=vim
export EDITOR=vim

# shellcheck disable=SC2034
IANS_DEFAULT_COLOR="[00m"
# shellcheck disable=SC2034
IANS_GRAY_COLOR="[37m"
# shellcheck disable=SC2034
IANS_PINK_COLOR="[35m"
# shellcheck disable=SC2034
IANS_ORANGE_COLOR="[33m"
# shellcheck disable=SC2034
IANS_RED_COLOR="[31m"
if [ "$(id -u)" == "0" ]; then
  # shellcheck disable=SC2034
  IANS_USER_COLOR=$IANS_RED_COLOR
else
  # shellcheck disable=SC2034
  IANS_USER_COLOR=$IANS_PINK_COLOR
fi

if [ "$(uname)" == "Darwin" ]; then
    # Enable colors on Mac OSX Terminal
    export CLICOLOR=1
    export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
else
    # Enable colors on linux
    eval "$(dircolors -b)"
fi

VCPROMPT_EXECUTABLE=~/bin/vcprompt
ians_vcprompt() {
    if [ -x $VCPROMPT_EXECUTABLE ]; then
        $VCPROMPT_EXECUTABLE -f $' on \033[34m%n\033[00m:\033[00m%[unknown]b\033[32m%m%u'
    fi
}

ians_lastcommandfailed() {
  code=$?
  if [ $code != 0 ]; then
    echo -n $'\033[37m exited \033[31m'
    echo -n $code
    echo -n $'\033[37m'
  fi
}
ians_virtualenv() {
  if [ x"$VIRTUAL_ENV" != x ]; then
    echo -n $' \033[37m(\033[31m'
    echo -n "$(basename "${VIRTUAL_ENV}")"
    echo -n $'\033[37m)\033[00m'
  fi
}

# Create vim swap file directory
if [ ! -d ~/.vimswp ]; then
    mkdir -p ~/.vim/swap
fi
if [ ! -d ~/.vim/backup ]; then
    mkdir -p ~/.vim/backup
fi

# export PIP_REQUIRE_VIRTUALENV=true
#export PIP_USE_MIRRORS=true
export PIP_RESPECT_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE=~/.pip_cache
if [ ! -e ~/.pip_cache ]; then
    mkdir ~/.pip_cache
fi
if [ ! -e ~/.buildout/download-cache ]; then
    mkdir -p ~/.buildout/download-cache
fi
if [ "$HOME" ]; then
    if which virtualenvwrapper.sh > /dev/null 2>&1; then
        WORKON_HOME=$HOME/.virtualenvs
        if [ ! -e "$WORKON_HOME" ]; then
            mkdir -p "$WORKON_HOME"
        fi
        export VIRTUALENVWRAPPER_LOG_DIR="$WORKON_HOME"
        export VIRTUALENVWRAPPER_HOOK_DIR="$WORKON_HOME"
        export PIP_VIRTUALENV_BASE="$WORKON_HOME"
        # shellcheck source=/dev/null
        source `which virtualenvwrapper.sh`
    fi
fi

# Create local hgrc file
if [ ! -e ~/.hgrc.local ]; then
    touch ~/.hgrc.local
fi

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
# Disable shellcheck for literal line-breaks and single quotes. We 
# don't want to expand variables or add line breaks.
# shellcheck disable=SC2016 disable=SC1004
IANS_BASEPROMPT='\n\e${IANS_USER_COLOR}\u\
\e${IANS_GRAY_COLOR}@\e${IANS_ORANGE_COLOR}\h\e${IANS_GRAY_COLOR} at \e${IANS_DEFAULT_COLOR}\t\
`ians_lastcommandfailed`\
\e${IANS_GRAY_COLOR}`ians_vcprompt`\
`ians_virtualenv`\
\e${IANS_DEFAULT_COLOR}'
export IANS_BASEPROMPT

PS1="${IANS_BASEPROMPT}
\\W\$ "

# ssh-agent
# Start an ssh-agent instance if an existing one isn't found.
SSH_ENV="$HOME/.ssh/ssh_agent_environment"
start_ssh_agent() {
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    # shellcheck source=/dev/null
    . "${SSH_ENV}" > /dev/null
    ssh-add
}

# Source SSH settings, if applicable
mkdir -p "${HOME}/.ssh"
if [[ ( -z "${SSH_AUTH_SOCK}" ) && ( -z "${SSH_AGENT_PID}" ) ]]; then
    if which ssh-agent > /dev/null 2>&1; then
        if [ -f "${SSH_ENV}" ]; then
            # shellcheck source=/dev/null
            . "${SSH_ENV}" > /dev/null
            pgrep -u "${USER}" "ssh-agent$" | grep "${SSH_AGENT_PID}" > /dev/null || {
                start_ssh_agent;
            }
        else
            start_ssh_agent;
        fi
    fi
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    # shellcheck source=bash/_bash_aliases
    . ~/.bash_aliases
fi

# Local settings
if [ -f ~/.bashrc.local ]; then
    # shellcheck source=/dev/null
    . ~/.bashrc.local 
fi

# Completion
# Load the system wide bash completion if available.
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    # The system wide config should load our local config.
    # shellcheck source=/dev/null
    . /etc/bash_completion
elif [ -f ~/.bash_completion ]; then
    # The system wide config is not available so just load our completion
    # shellcheck source=bash/_bash_completion
    . ~/.bash_completion
fi
